{% func Container(url string) %}
<!doctype html>
<html>

<head>
    <script src="/static/js/hterm_all.js"></script>
    <style>
        #terminal {
            position: absolute;
            height: 90%;
            width: 90%;
        }
    </style>
</head>

<body>

    <div id="terminal"></div>

    <script>
        var protocol = "ws:";

        if (location.protocol == 'https:') {
            protocol = "wss:";
        }

        var socket = new WebSocket(protocol + "//{%s url %}");

        socket.onopen = function() {
            hterm.defaultStorage = new lib.Storage.Memory();
            var t = new hterm.Terminal();
            t.getPrefs().set("send-encoding", "raw");

            t.onTerminalReady = function() {

                // Create a new terminal IO object and give it the foreground.
                // (The default IO object just prints warning messages about unhandled
                // things to the the JS console.)
                var io = t.io.push();

                io.onVTKeystroke = function(str) {
                    // Do something useful with str here.
                    // For example, Secure Shell forwards the string onto the NaCl plugin.
                    socket.send(JSON.stringify(['stdin', str]));
                };

                io.sendString = io.onVTKeystroke;

                io.onTerminalResize = function(columns, rows) {
                    // React to size changes here.
                    // Secure Shell pokes at NaCl, which eventually results in
                    // some ioctls on the host.
                    socket.send(JSON.stringify(['set_size', rows, columns]));
                };

                // You can call io.push() to foreground a fresh io context, which can
                // be uses to give control of the terminal to something else.  When that
                // thing is complete, should call io.pop() to restore control to the
                // previous io object.
                t.installKeyboard();
            };

            t.decorate(document.querySelector('#terminal'));

            socket.addEventListener("message", function(ev) {
                var data = JSON.parse(ev.data)

                if (data.length == 0) {
                    return;
                }

                var command = data[0];

                if (command == "stdout") {
                    t.io.print(data[1]);
                } else if (command == "wipe") {
                    t.wipeContents();
                }
            });

            var onclose = function() {
                t.uninstallKeyboard();
                t.io.showOverlay("Connection closed", null);
            };

            socket.addEventListener("close", onclose);
            socket.addEventListener("error", onclose);
        };
    </script>

</body>

</html>
{% endfunc %}