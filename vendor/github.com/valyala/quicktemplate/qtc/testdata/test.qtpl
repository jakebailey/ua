This is a test template file.
All the lines outside func and code are just comments.

Optional imports must be at the top of template
{% import (
	"fmt"
	"strconv"
)
%}

// Arbitrary go code may be inserted here. For instance, type definition:
{% code
type FooArgs struct {
	S string
	N int	
}
%}

Now define an exported function template
{% func Foo(a []FooArgs) %}
	<h1>Hello, I'm Foo!</h1>
	<div>
		My args are:
		{% if len(a) == 0 %}
			no args!
		{% elseif len(a) == 1 %}
			a single arg: {%= printArgs(0, &a[0]) %}
		{% else %}
			<ul>
			{% for i, aa := range a %}
				{% if i >= 42 %}
					There are other args, but only the first 42 of them are shown
					{% break %}
					All the stuff after break {%s "is" %} ignored,
					{% for %}even loops{% if i == 43 %}and conditions{% endif %}{% endfor %}
				{% elseif aa.N == 3 %}
					{% continue %}
					This should be {%s "ignored" %}.
				{% endif %}
				{%= printArgs(i, &aa) %}
				Arbitrary Go code may be inserted here: {% code	str := strconv.Itoa(i+42) %}
				str = {%s fmt.Sprintf("this html will be escaped <b>%s</b>", str) %}
			{% endfor %}
			</ul>
		{% endif %}
	</div>
	{% plain %}
		Arbitrary tags are treated as plaintext inside plain.
		For instance, {% foo %} {% bar %} {% for %}
		{% func %} {% code %} {% return %} {% break %} {% comment %}
		and even {% unclosed tag
	{% endplain %}
	{% collapsespace %}
		Leading and trailing space between lines and tags is collapsed
		inside collapsespace unless {%space%} or {%newline%} is used
	{% endcollapsespace %}
	{% stripspace %}
		Leading and trailing space between lines and tags is completely
		removed unless {%space%} or {%newline%} is used
	{% endstripspace %}
{% endfunc %}

{%plain%}
Now define private printArgs, which is used in Foo via {%= %} tag
{%endplain%}
{% func printArgs(i int, a *FooArgs) %}
	{% if i == 0 %}
		Hide args for i = 0
		{% return %}
		All the stuff after return is ignored:
		{% if 123 %}this{% endif %}
		{% for %}And this: {% break %} {% return %}{% endfor %}
	{% endif %}
	<li>
		a[{%d i %}] = {S: {%q a.S %}, SS: {%qz []byte(a.S) %}, N: {%d a.N %}}<br>
		{%s a.S %}, {%z []byte(a.S) %}, {%sz []byte(a.S) %}
		{%f 1.234 %}, {%f.1 1.234 %}, {% f.2= 1.234 %}
		alert("foo {%j "bar\naaa" %} baz {%jz []byte("aaa") %}")<br/>
		<a href="?{%u "аргумент 1"%}={%u "значение=<>\"'&1"%}">test1</a>
		<a href="?{%uz []byte("foobar") %}=123">test2</a>
	</li>

	Switch statement:
	{% stripspace %}
		a.S = 
	{% switch a.S %}
	{% case "foo" %}
		foo
		{%break%}
		ignore this
	{% case "bar" %}
		bar
	{% default %}
		{%q a.S %}
	{% endswitch %}
	{% endstripspace %}
{% endfunc %}


Now create page template interface.
{% iface Page {
	// Must print template head
	Head()

	// Must print template body
	Body(title string)
}
%}

This function prints arbitrary page.
{% func PrintPage(p Page, title string) %}
	<html>
		<head>{%= p.Head() %}</head>
		<body>{%= p.Body(title) %}</body>
	</html>
{% endfunc %}

Implement contacts page
{% code type ContactsPage struct {} %}
{% func (b *ContactsPage) Head() %}<title>Contacts!</title>{% endfunc %}
{% func (b *ContactsPage) Body(title string) %}Put here contact info{% endfunc Body %}

Implement HomePage
{% code type Homepage struct {} %}
{% func (h *Homepage) Head() %}<title>Homepage</title>{% endfunc %}
{% func (h *Homepage) Body(title string) %}
	Title: {%s= title %}
	Homepage body
{% endfunc %}

unused code may be commented:
{% comment %}
{% func UnusedFunc(n int) %}
	foobar
{% endfunc %}
{% endcomment %}
