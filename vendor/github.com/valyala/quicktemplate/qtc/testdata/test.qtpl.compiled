// This file is automatically generated by qtc from "test.qtpl".
// See https://github.com/valyala/quicktemplate for details.

//line testdata/test.qtpl:1
package testdata

//line testdata/test.qtpl:1
import (
	qtio422016 "io"

	qt422016 "github.com/valyala/quicktemplate"
)

// This is a test template file.
// All the lines outside func and code are just comments.
//
// Optional imports must be at the top of template

//line testdata/test.qtpl:5
import (
	"fmt"
	"strconv"
)

// Arbitrary go code may be inserted here. For instance, type definition:

//line testdata/test.qtpl:12
var (
	_ = qtio422016.Copy
	_ = qt422016.AcquireByteBuffer
)

//line testdata/test.qtpl:13
type FooArgs struct {
	S string
	N int
}

// Now define an exported function template

//line testdata/test.qtpl:20
func StreamFoo(qw422016 *qt422016.Writer, a []FooArgs) {
	//line testdata/test.qtpl:20
	qw422016.N().S(`
	<h1>Hello, I'm Foo!</h1>
	<div>
		My args are:
		`)
	//line testdata/test.qtpl:24
	if len(a) == 0 {
		//line testdata/test.qtpl:24
		qw422016.N().S(`
			no args!
		`)
		//line testdata/test.qtpl:26
	} else if len(a) == 1 {
		//line testdata/test.qtpl:26
		qw422016.N().S(`
			a single arg: `)
		//line testdata/test.qtpl:27
		streamprintArgs(qw422016, 0, &a[0])
		//line testdata/test.qtpl:27
		qw422016.N().S(`
		`)
		//line testdata/test.qtpl:28
	} else {
		//line testdata/test.qtpl:28
		qw422016.N().S(`
			<ul>
			`)
		//line testdata/test.qtpl:30
		for i, aa := range a {
			//line testdata/test.qtpl:30
			qw422016.N().S(`
				`)
			//line testdata/test.qtpl:31
			if i >= 42 {
				//line testdata/test.qtpl:31
				qw422016.N().S(`
					There are other args, but only the first 42 of them are shown
					`)
				//line testdata/test.qtpl:33
				break
				//line testdata/test.qtpl:36
			} else if aa.N == 3 {
				//line testdata/test.qtpl:36
				qw422016.N().S(`
					`)
				//line testdata/test.qtpl:37
				continue
				//line testdata/test.qtpl:39
			}
			//line testdata/test.qtpl:39
			qw422016.N().S(`
				`)
			//line testdata/test.qtpl:40
			streamprintArgs(qw422016, i, &aa)
			//line testdata/test.qtpl:40
			qw422016.N().S(`
				Arbitrary Go code may be inserted here: `)
			//line testdata/test.qtpl:41
			str := strconv.Itoa(i + 42)

			//line testdata/test.qtpl:41
			qw422016.N().S(`
				str = `)
			//line testdata/test.qtpl:42
			qw422016.E().S(fmt.Sprintf("this html will be escaped <b>%s</b>", str))
			//line testdata/test.qtpl:42
			qw422016.N().S(`
			`)
			//line testdata/test.qtpl:43
		}
		//line testdata/test.qtpl:43
		qw422016.N().S(`
			</ul>
		`)
		//line testdata/test.qtpl:45
	}
	//line testdata/test.qtpl:45
	qw422016.N().S(`
	</div>
	`)
	//line testdata/test.qtpl:47
	qw422016.N().S(`
		Arbitrary tags are treated as plaintext inside plain.
		For instance, {% foo %} {% bar %} {% for %}
		{% func %} {% code %} {% return %} {% break %} {% comment %}
		and even {% unclosed tag
	`)
	//line testdata/test.qtpl:52
	qw422016.N().S(`
	`)
	//line testdata/test.qtpl:53
	qw422016.N().S(`Leading and trailing space between lines and tags is collapsed inside collapsespace unless `)
	//line testdata/test.qtpl:55
	qw422016.N().S(` `)
	//line testdata/test.qtpl:55
	qw422016.N().S(`or `)
	//line testdata/test.qtpl:55
	qw422016.N().S(`
`)
	//line testdata/test.qtpl:55
	qw422016.N().S(`is used `)
	//line testdata/test.qtpl:56
	qw422016.N().S(`
	`)
	//line testdata/test.qtpl:57
	qw422016.N().S(`Leading and trailing space between lines and tags is completelyremoved unless`)
	//line testdata/test.qtpl:59
	qw422016.N().S(` `)
	//line testdata/test.qtpl:59
	qw422016.N().S(`or`)
	//line testdata/test.qtpl:59
	qw422016.N().S(`
`)
	//line testdata/test.qtpl:59
	qw422016.N().S(`is used`)
	//line testdata/test.qtpl:60
	qw422016.N().S(`
`)
//line testdata/test.qtpl:61
}

//line testdata/test.qtpl:61
func WriteFoo(qq422016 qtio422016.Writer, a []FooArgs) {
	//line testdata/test.qtpl:61
	qw422016 := qt422016.AcquireWriter(qq422016)
	//line testdata/test.qtpl:61
	StreamFoo(qw422016, a)
	//line testdata/test.qtpl:61
	qt422016.ReleaseWriter(qw422016)
//line testdata/test.qtpl:61
}

//line testdata/test.qtpl:61
func Foo(a []FooArgs) string {
	//line testdata/test.qtpl:61
	qb422016 := qt422016.AcquireByteBuffer()
	//line testdata/test.qtpl:61
	WriteFoo(qb422016, a)
	//line testdata/test.qtpl:61
	qs422016 := string(qb422016.B)
	//line testdata/test.qtpl:61
	qt422016.ReleaseByteBuffer(qb422016)
	//line testdata/test.qtpl:61
	return qs422016
//line testdata/test.qtpl:61
}

// Now define private printArgs, which is used in Foo via {%= %} tag

//line testdata/test.qtpl:66
func streamprintArgs(qw422016 *qt422016.Writer, i int, a *FooArgs) {
	//line testdata/test.qtpl:66
	qw422016.N().S(`
	`)
	//line testdata/test.qtpl:67
	if i == 0 {
		//line testdata/test.qtpl:67
		qw422016.N().S(`
		Hide args for i = 0
		`)
		//line testdata/test.qtpl:69
		return
		//line testdata/test.qtpl:73
	}
	//line testdata/test.qtpl:73
	qw422016.N().S(`
	<li>
		a[`)
	//line testdata/test.qtpl:75
	qw422016.N().D(i)
	//line testdata/test.qtpl:75
	qw422016.N().S(`] = {S: `)
	//line testdata/test.qtpl:75
	qw422016.E().Q(a.S)
	//line testdata/test.qtpl:75
	qw422016.N().S(`, SS: `)
	//line testdata/test.qtpl:75
	qw422016.E().QZ([]byte(a.S))
	//line testdata/test.qtpl:75
	qw422016.N().S(`, N: `)
	//line testdata/test.qtpl:75
	qw422016.N().D(a.N)
	//line testdata/test.qtpl:75
	qw422016.N().S(`}<br>
		`)
	//line testdata/test.qtpl:76
	qw422016.E().S(a.S)
	//line testdata/test.qtpl:76
	qw422016.N().S(`, `)
	//line testdata/test.qtpl:76
	qw422016.E().Z([]byte(a.S))
	//line testdata/test.qtpl:76
	qw422016.N().S(`, `)
	//line testdata/test.qtpl:76
	qw422016.E().SZ([]byte(a.S))
	//line testdata/test.qtpl:76
	qw422016.N().S(`
		`)
	//line testdata/test.qtpl:77
	qw422016.N().F(1.234)
	//line testdata/test.qtpl:77
	qw422016.N().S(`, `)
	//line testdata/test.qtpl:77
	qw422016.N().FPrec(1.234, 1)
	//line testdata/test.qtpl:77
	qw422016.N().S(`, `)
	//line testdata/test.qtpl:77
	qw422016.N().FPrec(1.234, 2)
	//line testdata/test.qtpl:77
	qw422016.N().S(`
		alert("foo `)
	//line testdata/test.qtpl:78
	qw422016.E().J("bar\naaa")
	//line testdata/test.qtpl:78
	qw422016.N().S(` baz `)
	//line testdata/test.qtpl:78
	qw422016.E().JZ([]byte("aaa"))
	//line testdata/test.qtpl:78
	qw422016.N().S(`")<br/>
		<a href="?`)
	//line testdata/test.qtpl:79
	qw422016.N().U("аргумент 1")
	//line testdata/test.qtpl:79
	qw422016.N().S(`=`)
	//line testdata/test.qtpl:79
	qw422016.N().U("значение=<>\"'&1")
	//line testdata/test.qtpl:79
	qw422016.N().S(`">test1</a>
		<a href="?`)
	//line testdata/test.qtpl:80
	qw422016.N().UZ([]byte("foobar"))
	//line testdata/test.qtpl:80
	qw422016.N().S(`=123">test2</a>
	</li>

	Switch statement:
	`)
	//line testdata/test.qtpl:84
	qw422016.N().S(`a.S =`)
	//line testdata/test.qtpl:86
	switch a.S {
	//line testdata/test.qtpl:87
	case "foo":
		//line testdata/test.qtpl:87
		qw422016.N().S(`foo`)
		//line testdata/test.qtpl:89
		break
	//line testdata/test.qtpl:91
	case "bar":
		//line testdata/test.qtpl:91
		qw422016.N().S(`bar`)
	//line testdata/test.qtpl:93
	default:
		//line testdata/test.qtpl:94
		qw422016.E().Q(a.S)
		//line testdata/test.qtpl:95
	}
	//line testdata/test.qtpl:96
	qw422016.N().S(`
`)
//line testdata/test.qtpl:97
}

//line testdata/test.qtpl:97
func writeprintArgs(qq422016 qtio422016.Writer, i int, a *FooArgs) {
	//line testdata/test.qtpl:97
	qw422016 := qt422016.AcquireWriter(qq422016)
	//line testdata/test.qtpl:97
	streamprintArgs(qw422016, i, a)
	//line testdata/test.qtpl:97
	qt422016.ReleaseWriter(qw422016)
//line testdata/test.qtpl:97
}

//line testdata/test.qtpl:97
func printArgs(i int, a *FooArgs) string {
	//line testdata/test.qtpl:97
	qb422016 := qt422016.AcquireByteBuffer()
	//line testdata/test.qtpl:97
	writeprintArgs(qb422016, i, a)
	//line testdata/test.qtpl:97
	qs422016 := string(qb422016.B)
	//line testdata/test.qtpl:97
	qt422016.ReleaseByteBuffer(qb422016)
	//line testdata/test.qtpl:97
	return qs422016
//line testdata/test.qtpl:97
}

// Now create page template interface.

//line testdata/test.qtpl:101
type Page interface {
	//line testdata/test.qtpl:101
	Head() string
	//line testdata/test.qtpl:101
	StreamHead(qw422016 *qt422016.Writer)
	//line testdata/test.qtpl:101
	WriteHead(qq422016 qtio422016.Writer)
	//line testdata/test.qtpl:101
	Body(title string) string
	//line testdata/test.qtpl:101
	StreamBody(qw422016 *qt422016.Writer, title string)
	//line testdata/test.qtpl:101
	WriteBody(qq422016 qtio422016.Writer, title string)
//line testdata/test.qtpl:101
}

// This function prints arbitrary page.

//line testdata/test.qtpl:111
func StreamPrintPage(qw422016 *qt422016.Writer, p Page, title string) {
	//line testdata/test.qtpl:111
	qw422016.N().S(`
	<html>
		<head>`)
	//line testdata/test.qtpl:113
	p.StreamHead(qw422016)
	//line testdata/test.qtpl:113
	qw422016.N().S(`</head>
		<body>`)
	//line testdata/test.qtpl:114
	p.StreamBody(qw422016, title)
	//line testdata/test.qtpl:114
	qw422016.N().S(`</body>
	</html>
`)
//line testdata/test.qtpl:116
}

//line testdata/test.qtpl:116
func WritePrintPage(qq422016 qtio422016.Writer, p Page, title string) {
	//line testdata/test.qtpl:116
	qw422016 := qt422016.AcquireWriter(qq422016)
	//line testdata/test.qtpl:116
	StreamPrintPage(qw422016, p, title)
	//line testdata/test.qtpl:116
	qt422016.ReleaseWriter(qw422016)
//line testdata/test.qtpl:116
}

//line testdata/test.qtpl:116
func PrintPage(p Page, title string) string {
	//line testdata/test.qtpl:116
	qb422016 := qt422016.AcquireByteBuffer()
	//line testdata/test.qtpl:116
	WritePrintPage(qb422016, p, title)
	//line testdata/test.qtpl:116
	qs422016 := string(qb422016.B)
	//line testdata/test.qtpl:116
	qt422016.ReleaseByteBuffer(qb422016)
	//line testdata/test.qtpl:116
	return qs422016
//line testdata/test.qtpl:116
}

// Implement contacts page

//line testdata/test.qtpl:119
type ContactsPage struct{}

//line testdata/test.qtpl:120
func (b *ContactsPage) StreamHead(qw422016 *qt422016.Writer) {
	//line testdata/test.qtpl:120
	qw422016.N().S(`<title>Contacts!</title>`)
//line testdata/test.qtpl:120
}

//line testdata/test.qtpl:120
func (b *ContactsPage) WriteHead(qq422016 qtio422016.Writer) {
	//line testdata/test.qtpl:120
	qw422016 := qt422016.AcquireWriter(qq422016)
	//line testdata/test.qtpl:120
	b.StreamHead(qw422016)
	//line testdata/test.qtpl:120
	qt422016.ReleaseWriter(qw422016)
//line testdata/test.qtpl:120
}

//line testdata/test.qtpl:120
func (b *ContactsPage) Head() string {
	//line testdata/test.qtpl:120
	qb422016 := qt422016.AcquireByteBuffer()
	//line testdata/test.qtpl:120
	b.WriteHead(qb422016)
	//line testdata/test.qtpl:120
	qs422016 := string(qb422016.B)
	//line testdata/test.qtpl:120
	qt422016.ReleaseByteBuffer(qb422016)
	//line testdata/test.qtpl:120
	return qs422016
//line testdata/test.qtpl:120
}

//line testdata/test.qtpl:121
func (b *ContactsPage) StreamBody(qw422016 *qt422016.Writer, title string) {
	//line testdata/test.qtpl:121
	qw422016.N().S(`Put here contact info`)
//line testdata/test.qtpl:121
}

//line testdata/test.qtpl:121
func (b *ContactsPage) WriteBody(qq422016 qtio422016.Writer, title string) {
	//line testdata/test.qtpl:121
	qw422016 := qt422016.AcquireWriter(qq422016)
	//line testdata/test.qtpl:121
	b.StreamBody(qw422016, title)
	//line testdata/test.qtpl:121
	qt422016.ReleaseWriter(qw422016)
//line testdata/test.qtpl:121
}

//line testdata/test.qtpl:121
func (b *ContactsPage) Body(title string) string {
	//line testdata/test.qtpl:121
	qb422016 := qt422016.AcquireByteBuffer()
	//line testdata/test.qtpl:121
	b.WriteBody(qb422016, title)
	//line testdata/test.qtpl:121
	qs422016 := string(qb422016.B)
	//line testdata/test.qtpl:121
	qt422016.ReleaseByteBuffer(qb422016)
	//line testdata/test.qtpl:121
	return qs422016
//line testdata/test.qtpl:121
}

// Implement HomePage

//line testdata/test.qtpl:124
type Homepage struct{}

//line testdata/test.qtpl:125
func (h *Homepage) StreamHead(qw422016 *qt422016.Writer) {
//line testdata/test.qtpl:125
qw422016.N().S(`<title>Homepage</title>`) }

//line testdata/test.qtpl:125
//line testdata/test.qtpl:125
func (h *Homepage) WriteHead(qq422016 qtio422016.Writer) {
	//line testdata/test.qtpl:125
	qw422016 := qt422016.AcquireWriter(qq422016)
	//line testdata/test.qtpl:125
	h.StreamHead(qw422016)
	//line testdata/test.qtpl:125
	qt422016.ReleaseWriter(qw422016)
//line testdata/test.qtpl:125
}

//line testdata/test.qtpl:125
func (h *Homepage) Head() string {
	//line testdata/test.qtpl:125
	qb422016 := qt422016.AcquireByteBuffer()
	//line testdata/test.qtpl:125
	h.WriteHead(qb422016)
	//line testdata/test.qtpl:125
	qs422016 := string(qb422016.B)
	//line testdata/test.qtpl:125
	qt422016.ReleaseByteBuffer(qb422016)
	//line testdata/test.qtpl:125
	return qs422016
//line testdata/test.qtpl:125
}

//line testdata/test.qtpl:126
func (h *Homepage) StreamBody(qw422016 *qt422016.Writer, title string) {
	//line testdata/test.qtpl:126
	qw422016.N().S(`
	Title: `)
	//line testdata/test.qtpl:127
	qw422016.N().S(title)
	//line testdata/test.qtpl:127
	qw422016.N().S(`
	Homepage body
`)
//line testdata/test.qtpl:129
}

//line testdata/test.qtpl:129
func (h *Homepage) WriteBody(qq422016 qtio422016.Writer, title string) {
	//line testdata/test.qtpl:129
	qw422016 := qt422016.AcquireWriter(qq422016)
	//line testdata/test.qtpl:129
	h.StreamBody(qw422016, title)
	//line testdata/test.qtpl:129
	qt422016.ReleaseWriter(qw422016)
//line testdata/test.qtpl:129
}

//line testdata/test.qtpl:129
func (h *Homepage) Body(title string) string {
	//line testdata/test.qtpl:129
	qb422016 := qt422016.AcquireByteBuffer()
	//line testdata/test.qtpl:129
	h.WriteBody(qb422016, title)
	//line testdata/test.qtpl:129
	qs422016 := string(qb422016.B)
	//line testdata/test.qtpl:129
	qt422016.ReleaseByteBuffer(qb422016)
	//line testdata/test.qtpl:129
	return qs422016
//line testdata/test.qtpl:129
}

// unused code may be commented:
